// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id         String   @id @default(uuid())
  code       Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)
  UserRole   UserRole @relation(fields: [userRoleId], references: [id])
  userRoleId String
}

enum RoleType {
  ADMINISTRATOR
  COMPANY_AUDITOR
  EVENT_AUDITOR
  EVENT_MANAGER
  COMPANY_MANAGER
}

enum Permissions {
  company_read
  company_write
  event_read
  event_write
  company_billing
  company_settings
  company_users
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EmailStatus {
  DELIVERED
  NOT_SENT
  SENT
  CLICK
  OPEN
  BOUNCE
  UNSUBSCRIBE
  PROCESSED
  DEFERRED
  DROPPED
  SPAMREPORT
  GROUP_UNSUBSCRIBE
  GROUP_RESUBSCRIBE
}

model Invite {
  id          String       @id @default(uuid())
  firstName   String?
  lastName    String?
  email       String
  emailStatus EmailStatus  @default(NOT_SENT)
  externalId  String?      @unique
  role        RoleType
  status      InviteStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Event       Event?       @relation(fields: [eventId], references: [id])
  eventId     String?
  Account     Account      @relation(fields: [accountId], references: [id])
  accountId   String
}

model Role {
  id          String        @id @default(uuid())
  name        RoleType      @unique
  permissions Permissions[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  UserRole    UserRole[]
}

model UserRole {
  id        String    @id @default(uuid())
  User      User      @relation(fields: [userId], references: [id])
  userId    String
  isDefault Boolean   @default(false)
  Role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  Event     Event?    @relation(fields: [eventId], references: [id])
  eventId   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Account   Account   @relation(fields: [accountId], references: [id])
  accountId String
  Session   Session[]
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  firstName      String
  lastName       String
  terms          Boolean    @default(false)
  profilePicture String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
  isFirstTime    Boolean    @default(true)
  isVerified     Boolean    @default(false)
  UserRole       UserRole[]
  Account        Account[]
  Alerts         Alert[]
}

model Account {
  id            String         @id @default(uuid())
  companyName   String?
  isActive      Boolean        @default(false)
  User          User           @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  Events        Event[]
  Subscription  Subscription[]
  Invites       Invite[]
  UserRoles     UserRole[]
  Configuration Configuration?
}
enum SupportPriorityEnum {
  email
  zendesk
  chat
  manager
}

enum SubscriptionTypeEnum {
  FREE
  BASIC
  PRO
  CUSTOM
}

enum SubscriptionStatusEnum {
  ACTIVE
  INACTIVE
}

enum SubscriptionPeriodEnum {
  MONTHLY
  YEARLY
}

model SubscriptionType {
  id           String                 @id @default(uuid())
  name         SubscriptionTypeEnum   @unique
  period       SubscriptionPeriodEnum
  externalId   String?                @unique
  createdAt    DateTime               @default(now())
  updatedAt    DateTime?              @updatedAt
  Subscription Subscription[]
}

model Subscription {
  id                 String                 @id @default(uuid())
  status             SubscriptionStatusEnum
  SubscriptionType   SubscriptionType       @relation(fields: [subscriptionTypeId], references: [id])
  subscriptionTypeId String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime?              @updatedAt
  externalId         String                 @unique
  Account            Account                @relation(fields: [accountId], references: [id])
  accountId          String
}

enum Theme {
  LIGHT
  DARK
}

model Event {
  id                     String               @id @unique
  name                   String
  logo                   String?
  portalBackgroundImage  String?
  landingBackgroundImage String?
  startDate              DateTime?
  startTime              DateTime?
  endTime                DateTime?
  endDate                DateTime?
  createdAt              DateTime             @default(now())
  description            String?
  isArchived             Boolean              @default(false)
  externalId             String?              @unique
  theme                  Theme?               @default(LIGHT)
  EventAttendants        EventAttendant[]
  EventConfiguration     EventConfiguration[]
  AttendeeInvites        AttendeeNotify[]
  Account                Account              @relation(fields: [accountId], references: [id])
  accountId              String
  UserRoles              UserRole[]
  Invites                Invite[]
  EventGame              EventGame            @relation(fields: [eventGameId], references: [id])
  eventGameId            String               @unique
}

enum EventGameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model EventGame {
  id           String        @id @default(uuid())
  Event        Event?
  eventId      String
  GameSessions GameSession[]
}

model GameConfiguration {
  id           String        @id @default(uuid())
  minPlayers   Int           @default(2)
  maxPlayers   Int?          @default(200)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  GameSessions GameSession[]
}

model EventGameQuestion {
  id            String      @id @default(uuid())
  question      String
  answer        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  GameSession   GameSession @relation(fields: [gameSessionId], references: [id])
  gameSessionId String
}

model AttendeePairingSession {
  id             String           @id @default(uuid())
  EventAttendees EventAttendant[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  GameSession    GameSession      @relation(fields: [gameSessionId], references: [id])
  gameSessionId  String
}

model AttendeeGameResults {
  id               String         @id @default(uuid())
  data             Json           @default("{}")
  isWinner         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  EventAttendant   EventAttendant @relation(fields: [eventAttendantId], references: [id])
  eventAttendantId String
  GameSession      GameSession    @relation(fields: [gameSessionId], references: [id])
  gameSessionId    String
}

enum EventGameName {
  ROULETTE_PAIRING
  VISUAL_BUSINESS_CARD
}

model GameSession {
  id                     String                   @id @default(uuid())
  timeLimit              Int?
  name                   EventGameName
  isLive                 Boolean                  @default(false)
  status                 EventGameStatus          @default(PENDING)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  GameConfig             GameConfiguration        @relation(fields: [gameConfigId], references: [id])
  gameConfigId           String
  EventGame              EventGame                @relation(fields: [eventGameId], references: [id])
  eventGameId            String
  AttendeeGameResults    AttendeeGameResults[]
  EventGameQuestions     EventGameQuestion[]
  AttendeePairingSession AttendeePairingSession[]
}

model EventAttendant {
  id                      String                   @id @default(uuid())
  data                    Json                     @default("{}")
  externalId              String                   @unique
  Event                   Event                    @relation(fields: [eventId], references: [id])
  eventId                 String
  AttendeePairingSessions AttendeePairingSession[]
  AttendeeGameResults     AttendeeGameResults[]
}

// for attendee that fill out email on coming soon page, notify them when event is live if event has started and paid
model AttendeeNotify {
  id          String      @id @default(uuid())
  email       String
  hasSent     Boolean     @default(false)
  emailStatus EmailStatus @default(NOT_SENT)
  externalId  String?     @unique
  event       Event       @relation(fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime    @default(now())
}

model EventConfiguration {
  id                      String    @id @default(uuid())
  event                   Event     @relation(fields: [eventId], references: [id])
  eventId                 String    @unique
  attendeeData            String[]
  showSlideControls       Boolean   @default(false)
  showAttendeeLeaderboard Boolean   @default(false)
  setLimit                Int?      @default(250)
  enableEarlyAccess       Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime? @updatedAt
}

model Configuration {
  id                    String    @id @default(uuid())
  allowEventStartEmail  Boolean   @default(true)
  allowEventEndEmail    Boolean   @default(true)
  allowPromotionalEmail Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  Account               Account   @relation(fields: [accountId], references: [id])
  accountId             String    @unique
}

model Notification {
  id        String    @id @default(uuid())
  title     String
  body      String
  link      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Alerts    Alert[]
}

model Alert {
  id             String       @id @default(uuid())
  notificationId String
  Notification   Notification @relation(fields: [notificationId], references: [id])
  hasRead        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  User           User         @relation(fields: [userId], references: [id])
  userId         String
}
