// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(uuid())
  code      Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  firstName        String
  lastName         String
  terms            Boolean            @default(false)
  profilePicture   String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  Events           Event[]
  Session          Session[]
  SubscriptionType SubscriptionType[]
  Subscription     Subscription[]
}

model Event {
  id                  String                @id @unique
  name                String
  organizers          String[]              @default([])
  User                User                  @relation(fields: [userId], references: [id])
  userId              String
  logo                String?
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime              @default(now())
  description         String?
  terms               Boolean               @default(false)
  isArchived          Boolean               @default(false)
  externalId          String?               @unique
  tempKey             String?               @unique
  theme               Theme?                @default(LIGHT)
  isPaid              Boolean               @default(false)
  EventAttendant      EventAttendant[]
  EventConfigurations EventConfigurations[]
  AttendeeNotify      AttendeeNotify[]
  Configuration       Configuration[]
}

enum SupportPriorityEnum {
  email
  zendesk
  chat
  manager
}

model EventConfigurations {
  id                  String                @id @default(uuid())
  attendeesLimit      Int
  maxDays             Int
  supportType         SupportPriorityEnum[]
  hasAttendeeBranding Boolean               @default(false)
  hasEventBranding    Boolean               @default(false)
  event               Event                 @relation(fields: [eventId], references: [id])
  eventId             String                @unique
}

enum SubscriptionTypeEnum {
  FREE
  BASIC
  PRO
  CUSTOM
}

enum SubscriptionStatusEnum {
  ACTIVE
  INACTIVE
}

enum SubscriptionPeriodEnum {
  MONTHLY
  YEARLY
}

model SubscriptionType {
  id           String                 @id @default(uuid())
  name         SubscriptionTypeEnum   @unique
  period       SubscriptionPeriodEnum
  externalId   String?                @unique
  createdAt    DateTime               @default(now())
  updatedAt    DateTime?              @updatedAt
  Subscription Subscription[]
  User         User?                  @relation(fields: [userId], references: [id])
  userId       String?
}

model Subscription {
  id                 String                 @id @default(uuid())
  status             SubscriptionStatusEnum
  SubscriptionType   SubscriptionType       @relation(fields: [subscriptionTypeId], references: [id])
  subscriptionTypeId String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  User               User                   @relation(fields: [userId], references: [id])
  userId             String
}

enum Theme {
  LIGHT
  DARK
}

model EventAttendant {
  id         String @id @default(uuid())
  data       Json   @default("{}")
  externalId String @unique
  event      Event  @relation(fields: [eventId], references: [id])
  eventId    String
}

// for attendee that fill out email on coming soon page, notify them when event is live if event has started and paid
model AttendeeNotify {
  id        String   @id @default(uuid())
  email     String
  hasSent   Boolean  @default(false)
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
}

enum AttendeeData {
  firstName
  lastName
  email
  company
  jobTitle
  location
  website
  custom
  linkedin
}

model Configuration {
  id                  String    @id @default(uuid())
  event               Event     @relation(fields: [eventId], references: [id])
  eventId             String    @unique
  attendeeData        String[]
  showSlideControls   Boolean   @default(false)
  showAttendeeDetails Boolean   @default(false)
  enableEarlyAccess   Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
}
