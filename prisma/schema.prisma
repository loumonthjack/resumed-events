// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(uuid())
  code      Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  firstName      String
  lastName       String
  terms          Boolean         @default(false)
  profilePicture String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  isFirstTime    Boolean         @default(true)
  isActive       Boolean         @default(false)
  isVerified     Boolean         @default(false)
  Events         Event[]
  Session        Session[]
  Subscription   Subscription[]
  Configuration  Configuration[]
  Alerts         Alerts[]
}

model Event {
  id                     String               @id @unique
  name                   String
  organizers             String[]             @default([])
  User                   User                 @relation(fields: [userId], references: [id])
  userId                 String
  logo                   String?
  portalBackgroundImage  String?
  landingBackgroundImage String?
  startDate              DateTime?
  endDate                DateTime?
  createdAt              DateTime             @default(now())
  description            String?
  isArchived             Boolean              @default(false)
  externalId             String?              @unique
  theme                  Theme?               @default(LIGHT)
  EventAttendant         EventAttendant[]
  EventConfiguration     EventConfiguration[]
  AttendeeNotify         AttendeeNotify[]
}

enum SupportPriorityEnum {
  email
  zendesk
  chat
  manager
}

enum SubscriptionTypeEnum {
  FREE
  BASIC
  PRO
  CUSTOM
}

enum SubscriptionStatusEnum {
  ACTIVE
  INACTIVE
}

enum SubscriptionPeriodEnum {
  MONTHLY
  YEARLY
}

model SubscriptionType {
  id           String                 @id @default(uuid())
  name         SubscriptionTypeEnum   @unique
  period       SubscriptionPeriodEnum
  externalId   String?                @unique
  createdAt    DateTime               @default(now())
  updatedAt    DateTime?              @updatedAt
  Subscription Subscription[]
}

model Subscription {
  id                 String                 @id @default(uuid())
  status             SubscriptionStatusEnum
  SubscriptionType   SubscriptionType       @relation(fields: [subscriptionTypeId], references: [id])
  subscriptionTypeId String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime?              @updatedAt
  User               User                   @relation(fields: [userId], references: [id])
  userId             String
}

enum Theme {
  LIGHT
  DARK
}

model EventAttendant {
  id         String @id @default(uuid())
  data       Json   @default("{}")
  externalId String @unique
  event      Event  @relation(fields: [eventId], references: [id])
  eventId    String
}

// for attendee that fill out email on coming soon page, notify them when event is live if event has started and paid
model AttendeeNotify {
  id        String   @id @default(uuid())
  email     String
  hasSent   Boolean  @default(false)
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
}

model EventConfiguration {
  id                      String    @id @default(uuid())
  event                   Event     @relation(fields: [eventId], references: [id])
  eventId                 String    @unique
  attendeeData            String[]
  showSlideControls       Boolean   @default(false)
  showAttendeeLeaderboard Boolean   @default(false)
  setLimit                Int?      @default(250)
  enableEarlyAccess       Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime? @updatedAt
}

model Configuration {
  id                    String    @id @default(uuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id])
  allowEventStartEmail  Boolean   @default(true)
  allowEventEndEmail    Boolean   @default(true)
  allowPromotionalEmail Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
}

model Notification {
  id        String    @id @default(uuid())
  title     String
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Alerts    Alerts[]
}

model Alerts {
  id             String       @id @default(uuid())
  userId         String
  User           User         @relation(fields: [userId], references: [id])
  notificationId String
  Notification   Notification @relation(fields: [notificationId], references: [id])
  hasRead        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
}
