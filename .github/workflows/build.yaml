
name: Build API

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/loumonthjack/resumed-events

jobs:
  deploy:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v3
    
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
    
        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: resumed-events
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        - name: Create ecs-task-def.json
          run: |
              cat > ecs-task-def.json <<EOF
              {
                "family": "resumed-events",
                "containerDefinitions": [
                    {
                        "name": "resumed-events-service",
                        "image": "412325484896.dkr.ecr.us-west-2.amazonaws.com/resumed-events:latest",
                        "cpu": 0,
                        "portMappings": [
                            {
                                "name": "resumed-events-service-4000-tcp",
                                "containerPort": 4000,
                                "hostPort": 4000,
                                "protocol": "tcp",
                                "appProtocol": "http"
                            }
                        ],
                        "essential": true,
                        "environment": [
                            {
                                "name": "NODE_ENV",
                                "value": `${{ secrets.NODE_ENV }}`
                            },
                            {
                                "name": "PORT",
                                "value": `${{ secrets.PORT }}`
                            },
                            {
                                "name": "DATABASE_URL",
                                "value": `${{ secrets.DATABASE_URL }}`
                            },
                            {
                                "name": "JWT_SECRET_KEY",
                                "value": `${{ secrets.JWT_SECRET_KEY }}`
                            },
                            {
                                "name": "STRIPE_WEBHOOK_KEY_TEST",
                                "value": `${{ secrets.STRIPE_WEBHOOK_KEY_TEST }}`
                            },
                            {
                                "name": "STRIPE_SECRET_KEY_TEST",
                                "value": `${{ secrets.STRIPE_SECRET_KEY_TEST }}`
                            },
                            {
                                "name": "SENDGRID_API_KEY",
                                "value": `${{ secrets.SENDGRID_API_KEY }}`
                            },
                            {
                                "name": "SENDGRID_FROM_EMAIL",
                                "value": `${{ secrets.SENDGRID_FROM_EMAIL }}`
                            },
                            {
                                "name": "AWS_BUCKET_NAME",
                                "value": `${{ secrets.AWS_BUCKET_NAME }}`
                            },
                            {
                                "name": "AWS_ACCESS_KEY_ID",
                                "value": `${{ secrets.AWS_ACCESS_KEY_ID }}`
                            },
                            {
                                "name": "AWS_SECRET_ACCESS_KEY",
                                "value": `${{ secrets.AWS_SECRET_ACCESS_KEY }}`
                            },
                            {
                                "name": "AWS_REGION",
                                "value": `${{ secrets.AWS_REGION }}`
                            },
                            {
                                "name": "DOMAIN_NAME",
                                "value": `${{ secrets.DOMAIN_NAME }}`
                            }
                        ],
                        "mountPoints": [],
                        "volumesFrom": [],
                        "ulimits": []
                    }
                ],
                "taskRoleArn": "arn:aws:iam::412325484896:role/ecsTaskExecutionRole",
                "executionRoleArn": "arn:aws:iam::412325484896:role/ecsTaskExecutionRole",
                "networkMode": "awsvpc",
                "requiresCompatibilities": [
                    "FARGATE"
                ],
                "cpu": "2048",
                "memory": "8192",
                "runtimePlatform": {
                    "cpuArchitecture": "X86_64",
                    "operatingSystemFamily": "LINUX"
                }
              }
              EOF  
              
        - name: Set up Amazon ECS action
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ./ecs-task-def.json
            container-name: resumed-events-service
            image: ${{ steps.login-ecr.outputs.registry }}/resumed-events:${{ github.sha }}

        - name: Deploy to Amazon ECS service
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ./ecs-task-def.json
            service: resumed-events-service
            cluster: resumed-events
      